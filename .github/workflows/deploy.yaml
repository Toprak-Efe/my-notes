name: Check for Updates and Deploy Site

on:
  # 1. Run automatically on a schedule (every 6 hours)
  # You can customize the cron schedule here.
  schedule:
    - cron: '0 0 * * *'

  # 2. Allow running this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: write # Need write permission to push submodule updates
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-22.04
    steps:
      # Step 1: Checkout the my-notes repo with its submodule
      - name: Checkout code with submodules
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          token: ${{ secrets.GITHUB_TOKEN }} # Use GITHUB_TOKEN for push access

      # Step 2: Configure Git for the bot commits
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # Step 3: Update the submodule to the latest commit
      - name: Update Submodule
        run: |
          # Go into the submodule's directory
          cd content
          # Fetch the latest changes from the remote
          git fetch
          # Forcefully reset the local submodule to match the remote's main branch
          git reset --hard origin/main
          # Go back to the parent directory
          cd ..
          
      # Step 4: Check for changes, then commit and push if there are any
      - name: Commit and Push if Changed
        run: |
          # If git diff finds any changes (the submodule was updated),
          # then commit and push them.
          if ! git diff --quiet HEAD; then
            git commit -am "Automated: Sync content from lunargarden"
            git push
          else
            echo "No changes to content. Skipping commit."
          fi

      # Step 5: Setup Node.js to build the site
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      # Step 6: Install dependencies and build Quartz
      - name: Install Dependencies
        run: npm ci
      - name: Build Quartz
        run: npx quartz build

      # Step 7: Upload the built site as a GitHub Pages artifact
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

  # The deploy job remains the same, it just takes the uploaded artifact
  deploy:
    needs: build-and-deploy
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
